/* 
    Copyright (C) 2002 Aleksey Kochetov

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
*/

/*
    16.12.2002 bug fix, file manager context menu fails
    09.03.2003 bug fix, desktop flickers when the programm is starting
    31.03.2003 bug fix, Attempt to open File dialog for a specified folder in File explorer fails 
                        if any file alredy open from another location
    27.03.2005 bug fix, wrong message if file or folder does not exist
*/

#include "stdafx.h"
#include <Shlwapi.h>
#include <string>
#include <COMMON/ExceptionHelper.h>
#include <WinException/WinException.h>
#include <COMMON/FilePanelWnd.h>
#include <COMMON/WorkbookMDIFrame.h>
#include "COMMON/GUICommandDictionary.h"
#include "COMMON/AppUtilities.h"

// FilePanelWnd
// TODO:
//      destroy icon test on Win95/Win98
//      file filter
//      history and favorites tabs
//      context menu
//      exception handling
//      add folder to driver list - folder favorites list
//      show/hide command
//      context menu
//      subclass driver list and add context menu

#define ID_FPW_OPEN_FILES   1000
#define ID_FPW_DRIVES       1001
#define ID_FPW_EXPLORER     1002
#define ID_FPW_FILTER       1003
#define ID_FPW_TOOLBAR      1004

#define ACTIVATE_FILE_TIMER 777
#define ACTIVATE_FILE_DELAY 500

    static BOOL GetVolumeName (LPCSTR rootDirectory, CString& volumeName)
    {
        const int STRSIZE = 80;
        DWORD volumeSerialNumber;           // volume serial number
        DWORD maximumComponentLength;       // maximum file name length
        DWORD fileSystemFlags;              // file system options
        char  fileSystemNameBuffer[STRSIZE];// file system name buffer

        BOOL volInfo = GetVolumeInformation(
            rootDirectory,                  // root directory
            volumeName.GetBuffer(STRSIZE),  // volume name buffer
            STRSIZE,                        // length of name buffer
            &volumeSerialNumber,            // volume serial number
            &maximumComponentLength,        // maximum file name length
            &fileSystemFlags,               // file system options
            fileSystemNameBuffer,           // file system name buffer
            sizeof(fileSystemNameBuffer)    // length of file system name buffer
        );

        volumeName.ReleaseBuffer();

        return volInfo;
    }

    static LPCSTR MakeVolumeLabel (LPCSTR rootDirectory, CString& volumeLabel)
    {
        volumeLabel = rootDirectory;
        volumeLabel.TrimRight('\\');
        
        CString volumeName;
        if (GetVolumeName(rootDirectory, volumeName))
        {
            volumeLabel += "   ";
            volumeLabel += volumeName;
        }

        return volumeLabel;
    }

    inline
    static bool IsFolder (const CString& path)
    {
        return Common::AppIsFolder(path, false/*nothrow*/);
    }

///////////////////////////////////////////////////////////////////////////////
IMPLEMENT_DYNAMIC(CFilePanelWnd, CWnd)

CFilePanelWnd::CFilePanelWnd()
: m_pExplorerTree(0)
{
    m_isExplorerInitialized = FALSE;
    m_isDrivesInitialized   = FALSE;
}

CFilePanelWnd::~CFilePanelWnd()
{
}

void CFilePanelWnd::SelectDrive (const CString& path, BOOL force)
{
    if (!m_hWnd)
    {
        m_curDrivePath = path;
    }
    else
    {
        CWaitCursor wait;
        for (int i(0), count(m_driverPaths.GetSize()); i < count; i++)
        {
            if (!m_driverPaths.ElementAt(i).CompareNoCase(path)
            && (force || m_driverPaths.ElementAt(i).CompareNoCase(m_curDrivePath)))
            {
                CString volumeName;
                // check driver availability
                if (!force && !GetVolumeName(path, volumeName))
                {
                    CString message;
                    message.Format("Cannot select drive \"%s\". Drive/device is not available.", (LPCSTR)path);
                    AfxMessageBox(message, MB_OK|MB_ICONSTOP);
                    SelectDrive(m_curDrivePath, TRUE);
                }
                else
                {
                    try
                    {
                        m_drivesCBox.SetCurSel(i);
                        m_curDrivePath = path;
                        GetExplorerTree().DisplayTree(m_curDrivePath, TRUE);
                        GetExplorerTree().SetSelPath(m_curDrivePath);
                    } catch (CWinException* x) {   
                        CString message;
                        message.Format("Cannot select drive \"%s\". %s", (LPCSTR)path, (LPCSTR)*x);
                        AfxMessageBox(message, MB_OK|MB_ICONSTOP);
                    }
                }
            }
        }
    }
}


/*
    Network path sample: "\\\\Akocheto-2\\TEMP"
*/
void CFilePanelWnd::DisplayDrivers (BOOL force, BOOL curOnly)
{
    if (force || !m_isDrivesInitialized)
    {
        CWaitCursor wait;

        if (!curOnly) m_drivesCBox.LockWindowUpdate(); // 09.03.2003 bug fix, desktop flickers when the programm is starting
        m_drivesCBox.SetRedraw(FALSE);
        m_drivesCBox.ResetContent();
        char  szDrives[2*1024];
        char* pDrive;

        if (curOnly)
        {
            _CHECK_AND_THROW_(m_curDrivePath.GetLength() < sizeof(szDrives) - 2, 
                "Current driver path is too long.");
            memset(szDrives, 0, sizeof(szDrives));
            memcpy(szDrives, (LPCSTR)m_curDrivePath, m_curDrivePath.GetLength());
        }
        else
        {
            _CHECK_AND_THROW_(GetLogicalDriveStrings(sizeof(szDrives), szDrives), 
                "Cannot get logical driver strings.");
        }

        m_driverPaths.RemoveAll();

        COMBOBOXEXITEM item;
        memset(&item, 0, sizeof(item));
        item.mask = CBEIF_TEXT;

        for (pDrive = szDrives; *pDrive; pDrive += strlen(pDrive) + 1, item.iItem++)
        {
            m_driverPaths.Add(pDrive);

            CString volumeLabel;
            item.pszText = (LPSTR)MakeVolumeLabel(pDrive, volumeLabel);

            SHFILEINFO shFinfo;
            if (SHGetFileInfo(pDrive, 0, &shFinfo, sizeof(shFinfo), SHGFI_ICON|SHGFI_SMALLICON))
            {
                item.mask |= CBEIF_IMAGE|CBEIF_SELECTEDIMAGE;
                item.iSelectedImage = item.iImage = shFinfo.iIcon;
                DestroyIcon(shFinfo.hIcon); // we only need the index from the system image list
            }

            m_drivesCBox.InsertItem(&item);
            
            if (m_curDrivePath == pDrive)
                m_drivesCBox.SetCurSel(item.iItem);
        }

        m_drivesCBox.SetRedraw(TRUE);
        if (!curOnly) m_drivesCBox.UnlockWindowUpdate();

        m_isDrivesInitialized = !curOnly;
    }
}

void CFilePanelWnd::OnChangeTab (UINT id)
{
    m_openFilesList.ShowWindow(id == ID_FILEPANE_OPEN_FILES ? SW_SHOW : SW_HIDE);
    m_drivesCBox.   ShowWindow(id == ID_FILEPANE_EXPLORER   ? SW_SHOW : SW_HIDE);
    GetExplorerTree(). ShowWindow(id == ID_FILEPANE_EXPLORER ? SW_SHOW : SW_HIDE);
    m_filterCBox.   ShowWindow(id == ID_FILEPANE_EXPLORER ? SW_SHOW : SW_HIDE);

    if (id == ID_FILEPANE_EXPLORER && !m_isExplorerInitialized)
    {
        CWaitCursor wait;
        UpdateWindow();

        DisplayDrivers(FALSE, TRUE);
        SelectDrive(m_curDrivePath, TRUE);
        m_isExplorerInitialized = TRUE;
    }

    m_toolbar.CheckButton(ID_FILEPANE_OPEN_FILES, id == ID_FILEPANE_OPEN_FILES);
    m_toolbar.CheckButton(ID_FILEPANE_EXPLORER, id == ID_FILEPANE_EXPLORER);
}

void CFilePanelWnd::ActivateOpenFile ()
{
    POSITION pos = m_openFilesList.GetFirstSelectedItemPosition();

    if (pos)
    {
        LVITEM item;
        memset(&item, 0, sizeof(item));
        item.mask = LVIF_PARAM;
        item.iItem = m_openFilesList.GetNextSelectedItem(pos);

        VERIFY(m_openFilesList.GetItem(&item));
        _ASSERT(AfxGetMainWnd()->IsKindOf(RUNTIME_CLASS(CWorkbookMDIFrame)));
        _ASSERT(((CMDIChildWnd*)item.lParam)->IsKindOf(RUNTIME_CLASS(CMDIChildWnd)));

        ((CWorkbookMDIFrame*)AfxGetMainWnd())->ActivateChild((CMDIChildWnd*)item.lParam);
    }
}

BEGIN_MESSAGE_MAP(CFilePanelWnd, CWnd)
    ON_WM_CREATE()
    ON_WM_DESTROY()
    ON_WM_SIZE()
    ON_CBN_SETFOCUS(ID_FPW_DRIVES, OnDrive_SetFocus)
    ON_CBN_SELCHANGE(ID_FPW_DRIVES, OnDrive_SelChange)
    ON_NOTIFY(NM_CLICK, ID_FPW_OPEN_FILES, OnOpenFiles_Click)
    ON_NOTIFY(NM_RCLICK, ID_FPW_OPEN_FILES, OnOpenFiles_RClick)
    ON_NOTIFY(LVN_KEYDOWN, ID_FPW_OPEN_FILES, OnOpenFiles_KeyDown)
    ON_NOTIFY(NM_DBLCLK, ID_FPW_EXPLORER, OnExplorerTree_DblClick)
    ON_NOTIFY(NM_RCLICK, ID_FPW_EXPLORER, OnExplorerTree_RClick)
    ON_NOTIFY(NM_RCLICK, ID_FPW_DRIVES, OnDrivers_RClick)
    ON_WM_TIMER()
    ON_COMMAND(ID_FPW_OPEN, OnFpwOpen)
    ON_COMMAND(ID_FPW_REFRESH, OnFpwRefresh)
    ON_COMMAND(ID_FPW_SET_DEF_DIR, OnFpwSetWorDir)
    ON_COMMAND(ID_FPW_REFRESH_DRIVERS, OnFpwRefreshDrivers)
    ON_COMMAND_RANGE(ID_FILEPANE_EXPLORER, ID_FILEPANE_OPEN_FILES, OnChangeTab)
    ON_WM_PAINT()
END_MESSAGE_MAP()


// FilePanelWnd message handlers


#include <afxcview.h>
int CFilePanelWnd::OnCreate(LPCREATESTRUCT lpCreateStruct)
{
    if (CWnd::OnCreate(lpCreateStruct) == -1)
        return -1;

    if (m_toolbar.Create(WS_VISIBLE | WS_CHILD | CCS_TOP | TBSTYLE_LIST | TBSTYLE_TOOLTIPS, 
            CRect(0,0,0,0), this, ID_FPW_TOOLBAR) == -1)
    {
        TRACE0("Failed to create toolbar\n");
        return -1;
    }
    //m_toolbar.SetExtendedStyle(TBSTYLE_EX_MIXEDBUTTONS);
    m_toolbar.SetBitmapSize(CSize(19, 19));
    VERIFY(m_toolbar.AddBitmap(2, IDB_OE_FILEPANE) != -1);
    ::SendMessage(m_toolbar.m_hWnd, TB_ADDSTRING, 0, (LPARAM)"Explorer\0Open Files\0\0");

    TBBUTTON btn;
    memset(&btn, 0, sizeof(btn));
    btn.fsStyle = TBSTYLE_BUTTON|BTNS_SHOWTEXT;

    btn.idCommand = ID_FILEPANE_EXPLORER;
    btn.iBitmap = 0;
    btn.iString = 0;
	VERIFY(m_toolbar.AddButtons(1, &btn));

    btn.idCommand = ID_FILEPANE_OPEN_FILES;
    btn.iBitmap = 1;
    btn.iString = 1;
	VERIFY(m_toolbar.AddButtons(1, &btn));

    // set TBSTYLE_FLAT at the end of initialization because of some mfc bug 
    m_toolbar.ModifyStyle(0, TBSTYLE_FLAT);
    m_toolbar.EnableButton(ID_FILEPANE_EXPLORER);
    m_toolbar.EnableButton(ID_FILEPANE_OPEN_FILES);

    if (!m_openFilesList.Create(
        WS_CHILD|WS_TABSTOP
        |LVS_REPORT|LVS_SORTASCENDING|LVS_NOCOLUMNHEADER
        |LVS_SHOWSELALWAYS|LVS_SINGLESEL, 
        CRect(0, 0, 0, 0), this, ID_FPW_OPEN_FILES))
    {
            TRACE0("Failed to create open files list\n");
            return -1;
    }

    if (!m_drivesCBox.Create(
        WS_CHILD|WS_TABSTOP|CBS_DROPDOWNLIST,
        CRect(0, 0, 0, GetSystemMetrics(SM_CYFULLSCREEN)/2), this, ID_FPW_DRIVES))
    {
            TRACE0("Failed to create drives combo box\n");
            return -1;
    }

    //if (!m_explorerTree.Create(
    //    WS_CHILD|WS_TABSTOP
    //    |TVS_LINESATROOT|TVS_HASBUTTONS|TVS_HASLINES|TVS_SHOWSELALWAYS, 
    //    CRect(0, 0, 0, 0), this, ID_FPW_EXPLORER))
    //{
    //    TRACE0("Failed to create explorer tree\n");
    //    return -1;
    //}

    m_splitter.CreateStatic(this, 2, 1);
    m_splitter.CreateView(0, 0, RUNTIME_CLASS(CDirTreeCtrl), CSize(100, 100), NULL);
    m_splitter.CreateView(1, 0, RUNTIME_CLASS(CListView), CSize(100, 100), NULL);
    m_pExplorerTree = (CDirTreeCtrl*)m_splitter.GetPane(0, 0);

    if (!m_filterCBox.Create(
        WS_CHILD|WS_TABSTOP|CBS_DROPDOWNLIST,
        CRect(0, 0, 0, GetSystemMetrics(SM_CYFULLSCREEN)/2), this, ID_FPW_FILTER))
    {
            TRACE0("Failed to create drives combo box\n");
            return -1;
    }
    m_filterCBox.EnableWindow(FALSE);

    // insert a column
    m_openFilesList.InsertColumn(0, (LPCSTR)NULL);
    m_openFilesList.SetExtendedStyle(m_openFilesList.GetExtendedStyle()|LVS_EX_FULLROWSELECT);

    ModifyStyleEx(0, WS_EX_CONTROLPARENT, 0);
    m_openFilesList.ModifyStyleEx(0, WS_EX_CLIENTEDGE, 0);
    GetExplorerTree().ModifyStyleEx(0, WS_EX_CLIENTEDGE, 0);

    m_drivesCBox.SetImageList(&GetExplorerTree().GetSysImageList());
    m_openFilesList.SetImageList(&GetExplorerTree().GetSysImageList(), LVSIL_SMALL);

    m_explorerStateImageList.Create(IDB_OE_EXPLORER_STATE_LIST, 16, 64, RGB(0,0,255));
    GetExplorerTree().SetImageList(&m_explorerStateImageList, TVSIL_STATE);

    // load saved tab
    OnChangeTab(ID_FILEPANE_EXPLORER);
    
    m_drivesRClick.SubclassWindow(::GetWindow(m_drivesCBox.m_hWnd, GW_CHILD));
    m_filterRClick.SubclassWindow(::GetWindow(m_filterCBox.m_hWnd, GW_CHILD));

    return 0;
}

VOID CFilePanelWnd::OnDestroy ()
{
    // for Win95 compatibility
    m_openFilesList.DestroyWindow();
    GetExplorerTree().DestroyWindow();
    m_drivesCBox.DestroyWindow(); 
    m_filterCBox.DestroyWindow();
    m_drivesRClick.DestroyWindow();
    m_filterRClick.DestroyWindow();

    CWnd::OnDestroy();
}

void CFilePanelWnd::OnSize(UINT nType, int cx, int cy)
{
    CWnd::OnSize(nType, cx, cy);

    if (cx > 0 && cy > 0
    && nType != SIZE_MAXHIDE && nType != SIZE_MINIMIZED) 
    {
        CRect rect;
        GetClientRect(&rect);

        if (m_toolbar.m_hWnd) 
        {
            m_toolbar.AutoSize();
            
            CRect rc;
            m_toolbar.GetWindowRect(&rc);
            rect.top += rc.Height();
        }
        
        CRect comboRect;
        m_drivesCBox.GetWindowRect(&comboRect);
        int comboH = comboRect.Height() + 2;

        HDWP hdwp = ::BeginDeferWindowPos(10);
        ::DeferWindowPos(hdwp, m_openFilesList, 0, rect.left, rect.top, 
            rect.Width(), rect.Height(), SWP_NOZORDER);
        ::DeferWindowPos(hdwp, m_drivesCBox, 0, rect.left, rect.top, 
            rect.Width(), rect.Height()/2, SWP_NOZORDER);
        
        ::DeferWindowPos(hdwp, m_splitter/*m_explorerTree*/, 0, rect.left, 
            rect.top + comboH, rect.Width(), rect.Height() - 2 * comboH, SWP_NOZORDER);

        ::DeferWindowPos(hdwp, m_filterCBox, 0, rect.left, 
            rect.top + rect.Height() - comboH + 2, rect.Width(), rect.Height()/2, SWP_NOZORDER);
        ::EndDeferWindowPos(hdwp);

        m_openFilesList.GetClientRect(rect);
        m_openFilesList.SetColumnWidth(0, rect.Width());
    }
}

// move the following code to refresh command handler
void CFilePanelWnd::OnDrive_SetFocus ()
{
    DisplayDrivers();
}

void CFilePanelWnd::OnDrive_SelChange ()
{
    int inx = m_drivesCBox.GetCurSel();
    _ASSERTE(inx < m_driverPaths.GetSize());

    if (inx < m_driverPaths.GetSize())
        SelectDrive(m_driverPaths.ElementAt(inx), FALSE);
}

void CFilePanelWnd::OpenFiles_Append (LVITEM& item)
{
    item.iItem = m_openFilesList.GetItemCount();
    VERIFY(m_openFilesList.InsertItem(&item) != -1);
}


void CFilePanelWnd::OpenFiles_UpdateByParam (LPARAM param, LVITEM& item)
{
    int nItem = OpenFiles_FindByParam(param);

    ASSERT(nItem != -1);

    if (nItem != -1)
    {
        // sorting does not work for update so ...
        VERIFY(m_openFilesList.DeleteItem(nItem));
        VERIFY(m_openFilesList.InsertItem(&item) != -1);
    }
}


void CFilePanelWnd::OpenFiles_RemoveByParam (LPARAM param)
{
    int nItem = OpenFiles_FindByParam(param);

    ASSERT(nItem != -1);

    if (nItem != -1)
        VERIFY(m_openFilesList.DeleteItem(nItem));
}


void CFilePanelWnd::OpenFiles_ActivateByParam (LPARAM param)
{
    int nItem = OpenFiles_FindByParam(param);

    ASSERT(nItem != -1);

    if (nItem != -1)
        VERIFY(m_openFilesList.SetItemState(nItem, LVIS_SELECTED, LVIS_SELECTED));
}


LPARAM CFilePanelWnd::OpenFiles_GetCurSelParam ()
{
    int nItem = m_openFilesList.GetNextItem(-1, LVNI_SELECTED);

    ASSERT(nItem != -1);

    if (nItem != -1)
    {
        LVITEM item;
        item.mask = LVIF_PARAM;
        item.iItem = nItem;
        VERIFY(m_openFilesList.GetItem(&item));
        return item.lParam;
    }

    return 0;
}


int CFilePanelWnd::OpenFiles_FindByParam (LPARAM param)
{
    LVITEM item;
    memset(&item, 0, sizeof(item));
    item.mask = LVIF_PARAM|LVIF_TEXT;
    int nItems = m_openFilesList.GetItemCount();

    for (item.iItem = 0; item.iItem < nItems; item.iItem++) 
    {
        VERIFY(m_openFilesList.GetItem(&item));

        if (item.lParam == param)
            return item.iItem;
    }

    return -1;
}

void CFilePanelWnd::OnOpenFiles_Click (NMHDR*, LRESULT* pResult)
{
    ActivateOpenFile();
    *pResult = 0;
}

void CFilePanelWnd::OnOpenFiles_KeyDown (NMHDR*, LRESULT* pResult)
{
    SetTimer(ACTIVATE_FILE_TIMER, ACTIVATE_FILE_DELAY, 0);
    *pResult = 0;
}

void CFilePanelWnd::OnOpenFiles_RClick (NMHDR* pNMHDR, LRESULT* pResult)
{
    ActivateOpenFile();

    NMITEMACTIVATE* pItem = (NMITEMACTIVATE*)pNMHDR;
    if (pItem && pItem->iItem != -1)
    {
        CPoint point(pItem->ptAction);
        m_openFilesList.ClientToScreen(&point);

        CMenu menu;
        VERIFY(menu.LoadMenu(IDR_OE_WORKBOOK_POPUP));
        CMenu* pPopup = menu.GetSubMenu(0);

        ASSERT(pPopup != NULL);
        ASSERT_KINDOF(CFrameWnd, AfxGetMainWnd());
        Common::GUICommandDictionary::AddAccelDescriptionToMenu(pPopup->m_hMenu);
        pPopup->TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, AfxGetMainWnd());

        *pResult = 1;
    }
    else
        *pResult = 0;
}

void CFilePanelWnd::OnTimer (UINT nIDEvent)
{
    if (nIDEvent == ACTIVATE_FILE_TIMER)
    {
        BOOL active = GetFocus() == &m_openFilesList ? TRUE : FALSE;
        ActivateOpenFile();
        if (active) 
            m_openFilesList.SetFocus();
    }

    CWnd::OnTimer(nIDEvent);
}

void CFilePanelWnd::OnExplorerTree_DblClick (NMHDR*, LRESULT* pResult)
{
    HTREEITEM hCurSel = GetExplorerTree().GetNextItem(TVI_ROOT, TVGN_CARET);

    if (hCurSel)
    {
        CPoint point;
        ::GetCursorPos(&point);
        GetExplorerTree().ScreenToClient(&point);
        if (GetExplorerTree().HitTest(point, 0) == hCurSel)
        {
            CString path = GetExplorerTree().GetFullPath(hCurSel);
            if (!IsFolder(path) || (0xFF00 & GetKeyState(VK_CONTROL)))
            {
                PostMessage(WM_COMMAND, ID_FPW_OPEN);
                *pResult = 1;
                return;
            }
        }
    }

    *pResult = 0;
}

void CFilePanelWnd::OnExplorerTree_RClick (NMHDR*, LRESULT* pResult)
{
    UINT uFlags;
    CPoint point;
    ::GetCursorPos(&point);
    GetExplorerTree().ScreenToClient(&point);
    HTREEITEM hItem = GetExplorerTree().HitTest(point, &uFlags);
    
    if (hItem && TVHT_ONITEM & uFlags)
    {
        if (GetExplorerTree().GetNextItem(TVI_ROOT, TVGN_CARET) != hItem)
            GetExplorerTree().SelectItem(hItem);

        CMenu menu;
        VERIFY(menu.LoadMenu(IDR_OE_EXPLORER_POPUP));
        CMenu* pPopup = menu.GetSubMenu(0);

        BOOL isFolder = IsFolder(GetExplorerTree().GetFullPath(hItem));
        if (!isFolder) pPopup->SetDefaultItem(ID_FPW_OPEN);
        pPopup->ModifyMenu(ID_FPW_OPEN, MF_BYCOMMAND, ID_FPW_OPEN, !isFolder ? "Open File\tDblClick" : "Open File Dalog...\tCtrl+DblClick");
        pPopup->EnableMenuItem(ID_FPW_REFRESH, isFolder ? MF_BYCOMMAND|MF_ENABLED : MF_BYCOMMAND|MF_GRAYED);

        pPopup->RemoveMenu(2, MF_BYPOSITION);
        pPopup->RemoveMenu(2, MF_BYPOSITION);
        pPopup->RemoveMenu(2, MF_BYPOSITION);
        //pPopup->EnableMenuItem(ID_FPW_GOTO_DEF_DIR, isFolder ? MF_BYCOMMAND|MF_ENABLED : MF_BYCOMMAND|MF_GRAYED);
        //pPopup->EnableMenuItem(ID_FPW_SET_DEF_DIR, isFolder ? MF_BYCOMMAND|MF_ENABLED : MF_BYCOMMAND|MF_GRAYED);

        ASSERT(pPopup != NULL);
        GetExplorerTree().ClientToScreen(&point);
        pPopup->TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this);

        *pResult = 1;
    }
    else
    {
        *pResult = 0;
    }
}

void CFilePanelWnd::OnDrivers_RClick (NMHDR*, LRESULT* pResult)
{
    CPoint point;
    ::GetCursorPos(&point);

    CMenu menu;
    VERIFY(menu.LoadMenu(IDR_OE_DRIVERS_POPUP));
    CMenu* pPopup = menu.GetSubMenu(0);
    ASSERT(pPopup != NULL);
    pPopup->SetDefaultItem(ID_FPW_REFRESH_DRIVERS);
    pPopup->TrackPopupMenu(TPM_LEFTALIGN | TPM_RIGHTBUTTON, point.x, point.y, this);

    *pResult = 1;
}

void CFilePanelWnd::OnFpwOpen ()
{
    HTREEITEM hCurSel = GetExplorerTree().GetNextItem(TVI_ROOT, TVGN_CARET);
    if (hCurSel)
    {
        CString path = GetExplorerTree().GetFullPath(hCurSel);
        AfxGetApp()->OpenDocumentFile(path);
    }
}

void CFilePanelWnd::OnFpwRefresh ()
{
    HTREEITEM hCurSel = GetExplorerTree().GetNextItem(TVI_ROOT, TVGN_CARET);
    if (hCurSel)
    {
        CString path = GetExplorerTree().GetFullPath(hCurSel);
        if (IsFolder(path))
            GetExplorerTree().RefreshFolder(hCurSel);
        else
            MessageBeep((UINT)-1);
    }
}

void CFilePanelWnd::OnFpwSetWorDir ()
{
    HTREEITEM hCurSel = GetExplorerTree().GetNextItem(TVI_ROOT, TVGN_CARET);
    if (hCurSel)
    {
        CString path = GetExplorerTree().GetFullPath(hCurSel);
        if (IsFolder(path))
        {
            GetExplorerTree().SetItemState(hCurSel, INDEXTOSTATEIMAGEMASK(1), TVIS_STATEIMAGEMASK);
        }
        else
            MessageBeep((UINT)-1);
    }
}

BOOL CFilePanelWnd::SetCurPath (const CString& path)
{
    CString buffer = path;

    if (strnicmp(buffer, m_curDrivePath, m_curDrivePath.GetLength()))
        DisplayDrivers();

    for (int i(0), count(m_driverPaths.GetSize()); i < count; i++)
    {
        if (!strnicmp(buffer, m_driverPaths[i], m_driverPaths[i].GetLength()))
        {
            SelectDrive(m_driverPaths[i]);
            if (GetExplorerTree().SetSelPath(buffer))
            {
                OnChangeTab(ID_FILEPANE_EXPLORER);
                return TRUE;
            }
        }
    }

    return FALSE;
}

void CFilePanelWnd::OnFpwRefreshDrivers()
{
    DisplayDrivers(TRUE);
}

LRESULT CFilePanelWnd::WindowProc(UINT message, WPARAM wParam, LPARAM lParam)
{
    try { EXCEPTION_FRAME;

        return CWnd::WindowProc(message, wParam, lParam);
    }
    _COMMON_DEFAULT_HANDLER_

    return 0;
}

void CFilePanelWnd::OnPaint()
{
    CPaintDC dc(this);
    ::FillRect(dc, &dc.m_ps.rcPaint, (HBRUSH)::GetSysColorBrush(COLOR_BTNFACE));
}
